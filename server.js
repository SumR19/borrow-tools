require("dotenv").config();
const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");
const path = require("path");

const app = express();

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MONGO_URI ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
console.log("üîç Connecting to MongoDB:", process.env.MONGO_URI);

// ‚úÖ CORS Configuration
app.use(cors({
    origin: "*",
    methods: ["GET", "POST", "DELETE"],
    allowedHeaders: ["Content-Type"]
}));

app.use(express.json());

// ‚úÖ MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    serverSelectionTimeoutMS: 10000,
    socketTimeoutMS: 45000,
    autoIndex: true,
})
.then(() => console.log("‚úÖ MongoDB Connected"))
.catch(err => console.error("‚ùå MongoDB Connection Error:", err));

// ‚úÖ Schema Definition
const toolSchema = new mongoose.Schema({
    name: String,
    site: String,
    quantity: Number,
    note: { type: String, default: "" },
    borrowedAt: { type: Date, default: Date.now },
    returnedAt: { type: Date, default: null },
    status: { type: String, default: "borrowed" }, // "borrowed" ‡∏´‡∏£‡∏∑‡∏≠ "returned"
    returnedBy: { type: String, default: "" },
    returnNote: { type: String, default: "" }
});

const Tool = mongoose.model("Tool", toolSchema);

// ‚úÖ API: ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
app.get("/categories", async (req, res) => {
    try {
        const categories = await Tool.distinct("site", { status: "borrowed" });
        console.log("üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö:", categories);
        res.json(categories.sort()); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏î‡∏∂‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
app.get("/borrowed-tools/:category?", async (req, res) => {
    try {
        const { category } = req.params;
        let filter = { status: "borrowed" };
        
        // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÉ‡∏´‡πâ filter ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏±‡πâ‡∏ô
        if (category && category !== 'all') {
            filter.site = decodeURIComponent(category);
        }
        
        const tools = await Tool.find(filter);
        console.log(`üìã ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${category || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${tools.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
        const groupedBySite = tools.reduce((acc, tool) => {
            if (!acc[tool.site]) acc[tool.site] = [];
            acc[tool.site].push(tool);
            return acc;
        }, {});
        
        res.json(groupedBySite);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô (‡πÄ‡∏î‡∏¥‡∏° - ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
app.get("/borrowed-tools", async (req, res) => {
    try {
        const tools = await Tool.find({ status: "borrowed" });
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
        const groupedBySite = tools.reduce((acc, tool) => {
            if (!acc[tool.site]) acc[tool.site] = [];
            acc[tool.site].push(tool);
            return acc;
        }, {});
        
        res.json(groupedBySite);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
app.get("/api/category-stats", async (req, res) => {
    try {
        const stats = await Tool.aggregate([
            { $match: { status: "borrowed" } },
            {
                $group: {
                    _id: "$site",
                    totalItems: { $sum: 1 },
                    totalQuantity: { $sum: "$quantity" },
                    tools: { $push: { name: "$name", quantity: "$quantity" } }
                }
            },
            { $sort: { totalQuantity: -1 } }
        ]);
        
        console.log("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:", stats);
        res.json(stats);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°
app.post("/borrow", async (req, res) => {
    try {
        const { site, tools, note } = req.body;
        if (!site) return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô!" });

        const currentTime = new Date();
        const thaiTime = currentTime.toLocaleString('th-TH', { 
            timeZone: 'Asia/Bangkok',
            dateStyle: 'full',
            timeStyle: 'medium'
        });

        console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:");
        console.log("üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°:", thaiTime);
        console.log("üèóÔ∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô:", site);
        console.log("üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥");
        console.log("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:", note || "‡πÑ‡∏°‡πà‡∏°‡∏µ");
        console.log("üîß ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:");
        
        tools.forEach((tool, index) => {
            console.log(`   ${index + 1}. ${tool.name} - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${tool.quantity || 1} ‡∏ä‡∏¥‡πâ‡∏ô`);
        });

        console.log("üìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", tools.length, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");

        await Tool.insertMany(tools.map(tool => ({
            name: tool.name,
            site,
            quantity: Number(tool.quantity) || 1,
            note: note || "",
            borrowedAt: currentTime,
            status: "borrowed"
        })));

        res.json({ message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${site}" ‡πÅ‡∏•‡πâ‡∏ß` });
    } catch (err) {
        console.error("‚ùå Error ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", err.message);
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏¥‡πâ‡∏ô (‡πÉ‡∏ä‡πâ status)
app.post("/return-item", async (req, res) => {
    try {
        const { site, name, returnedBy = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", returnNote = "" } = req.body;
        if (!site || !name) return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå!" });

        const tool = await Tool.findOne({ site, name, status: "borrowed" });
        const currentTime = new Date();
        const thaiTime = currentTime.toLocaleString('th-TH', { 
            timeZone: 'Asia/Bangkok',
            dateStyle: 'full',
            timeStyle: 'medium'
        });

        if (!tool) {
            console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: "${name}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "${site}" ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô`);
            return res.status(404).json({ error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "${name}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${site}" ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô` });
        }

        if (tool.quantity > 1) {
            // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô
            await Tool.updateOne({ _id: tool._id }, { $inc: { quantity: -1 } });
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
            await Tool.create({
                name: tool.name,
                site: tool.site,
                quantity: 1,
                note: tool.note,
                borrowedAt: tool.borrowedAt,
                returnedAt: currentTime,
                status: "returned",
                returnedBy,
                returnNote
            });
            
            console.log(`‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: "${name}" 1 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "${site}" (‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${tool.quantity - 1} ‡∏ä‡∏¥‡πâ‡∏ô)`);
            console.log(`üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${thaiTime}`);
            console.log(`üë§ ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏î‡∏¢: ${returnedBy}`);
            
            res.json({ message: `‡∏Ñ‡∏∑‡∏ô ${name} 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${site} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!` });
        } else {
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "returned" ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
            await Tool.updateOne(
                { _id: tool._id }, 
                { 
                    status: "returned",
                    returnedAt: currentTime,
                    returnedBy,
                    returnNote
                }
            );
            
            console.log(`‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: "${name}" ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "${site}"`);
            console.log(`üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${thaiTime}`);
            console.log(`üë§ ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏î‡∏¢: ${returnedBy}`);
            
            res.json({ message: `‡∏Ñ‡∏∑‡∏ô ${name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${site}` });
        }
    } catch (err) {
        console.error("‚ùå Error ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", err.message);
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ status)
app.post("/return-all", async (req, res) => {
    try {
        const { site, name, returnedBy = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", returnNote = "" } = req.body;
        if (!site || !name) return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå!" });

        const tool = await Tool.findOne({ site, name, status: "borrowed" });
        const currentTime = new Date();
        const thaiTime = currentTime.toLocaleString('th-TH', { 
            timeZone: 'Asia/Bangkok',
            dateStyle: 'full',
            timeStyle: 'medium'
        });

        if (!tool) {
            console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: "${name}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "${site}" ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô`);
            return res.status(404).json({ error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "${name}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${site}" ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô` });
        }

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "returned"
        await Tool.updateOne(
            { _id: tool._id }, 
            { 
                status: "returned",
                returnedAt: currentTime,
                returnedBy,
                returnNote
            }
        );
        
        console.log(`‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: "${name}" ‡∏ó‡∏±‡πâ‡∏á‡∏´‡¶Æ‡∏î ${tool.quantity} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: "${site}"`);
        console.log(`üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${thaiTime}`);
        console.log(`üë§ ‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏î‡∏¢: ${returnedBy}`);

        res.json({ message: `‡∏Ñ‡∏∑‡∏ô ${name} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${site}` });
    } catch (err) {
        console.error("‚ùå Error ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", err.message);
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
app.get("/api/stats", async (req, res) => {
    try {
        const totalTools = await Tool.countDocuments({ status: "borrowed" });
        const totalSites = await Tool.distinct("site", { status: "borrowed" }).then(sites => sites.length);
        const toolsByCategory = await Tool.aggregate([
            { $match: { status: "borrowed" } },
            { $group: { _id: "$name", count: { $sum: "$quantity" } } },
            { $sort: { count: -1 } }
        ]);
        const recentBorrows = await Tool.find({ status: "borrowed" }).sort({ borrowedAt: -1 }).limit(5);
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        const categoriesStats = await Tool.aggregate([
            { $match: { status: "borrowed" } },
            {
                $group: {
                    _id: "$site",
                    count: { $sum: 1 },
                    totalQuantity: { $sum: "$quantity" }
                }
            },
            { $sort: { totalQuantity: -1 } }
        ]);
        
        res.json({
            totalTools,
            totalSites,
            toolsByCategory,
            recentBorrows,
            categoriesStats // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
app.get("/api/chart-data", async (req, res) => {
    try {
        const sevenDaysAgo = new Date();
        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
        
        const last7Days = [];
        for (let i = 6; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            last7Days.push({
                date: date.toISOString().split('T')[0],
                displayDate: date.toLocaleDateString('th-TH', { 
                    month: 'short', 
                    day: 'numeric' 
                }),
                count: 0
            });
        }
        
        const dailyBorrows = await Tool.aggregate([
            { $match: { borrowedAt: { $gte: sevenDaysAgo }, status: "borrowed" } },
            {
                $group: {
                    _id: { $dateToString: { format: "%Y-%m-%d", date: "$borrowedAt" } },
                    count: { $sum: 1 },
                    totalQuantity: { $sum: "$quantity" }
                }
            },
            { $sort: { _id: 1 } }
        ]);
        
        dailyBorrows.forEach(borrow => {
            const dayIndex = last7Days.findIndex(day => day.date === borrow._id);
            if (dayIndex !== -1) {
                last7Days[dayIndex].count = borrow.count;
                last7Days[dayIndex].totalQuantity = borrow.totalQuantity;
            }
        });
        
        const topTools = await Tool.aggregate([
            { $match: { status: "borrowed" } },
            { $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } } },
            { $sort: { totalQuantity: -1 } },
            { $limit: 5 }
        ]);
        
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ó‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô
        const siteStats = await Tool.aggregate([
            { $match: { status: "borrowed" } },
            { $group: { _id: "$site", count: { $sum: 1 }, totalQuantity: { $sum: "$quantity" } } },
            { $sort: { totalQuantity: -1 } },
            { $limit: 5 }
        ]);
        
        const fourteenDaysAgo = new Date();
        fourteenDaysAgo.setDate(fourteenDaysAgo.getDate() - 14);
        
        const lastWeekBorrows = await Tool.countDocuments({
            borrowedAt: { $gte: fourteenDaysAgo, $lt: sevenDaysAgo },
            status: "borrowed"
        });
        
        const thisWeekBorrows = await Tool.countDocuments({
            borrowedAt: { $gte: sevenDaysAgo },
            status: "borrowed"
        });
        
        const weeklyChange = lastWeekBorrows > 0 
            ? ((thisWeekBorrows - lastWeekBorrows) / lastWeekBorrows * 100).toFixed(1)
            : 0;
        
        res.json({ 
            dailyBorrows: last7Days,
            topTools,
            siteStats, // ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            weeklyComparison: {
                thisWeek: thisWeekBorrows,
                lastWeek: lastWeekBorrows,
                change: weeklyChange
            }
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô
app.get("/history", async (req, res) => {
    try {
        const { days = 30, status = "all", category = "all" } = req.query;
        const daysAgo = new Date();
        daysAgo.setDate(daysAgo.getDate() - parseInt(days));
        
        let filter = { borrowedAt: { $gte: daysAgo } };
        if (status !== "all") filter.status = status;
        if (category !== "all") filter.site = decodeURIComponent(category);
        
        const history = await Tool.find(filter)
            .sort({ borrowedAt: -1 })
            .limit(100);
            
        res.json(history);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ API: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
app.get("/api/return-stats", async (req, res) => {
    try {
        const totalBorrowed = await Tool.countDocuments({ status: "borrowed" });
        const totalReturned = await Tool.countDocuments({ status: "returned" });
        const returnRate = totalBorrowed + totalReturned > 0 
            ? ((totalReturned / (totalBorrowed + totalReturned)) * 100).toFixed(1)
            : 0;
            
        const overdueTools = await Tool.find({ status: "borrowed" })
            .sort({ borrowedAt: 1 })
            .limit(5);
            
        res.json({
            totalBorrowed,
            totalReturned,
            returnRate,
            overdueTools
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ Static Files
app.use(express.static(path.join(__dirname, "public")));

// ‚úÖ Routes
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

app.get("/dashboard", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "dashboard.html"));
});

app.get("/api-ui", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "api-ui.html"));
});

app.get("/history-page", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "history.html"));
});

// ‚úÖ Start Server
const PORT = 3000;
app.listen(PORT, () => console.log(`üöÄ Server running on http://localhost:${PORT}`));